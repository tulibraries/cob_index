#!/usr/bin/env ruby
# frozen_string_literal: true

require "gli"
require "cob_index"

class App
  extend GLI::App

  program_desc "Wrapper cli app for indexing tul_cob app"

  subcommand_option_handling :normal
  arguments :strict

  desc "Ingest files into solr endpoint using tul_cob traject config"
  arg_name "filepath/URL"
  command :ingest do |c|
    c.desc "Commit docs after ingest process closes."
    c.switch ["commit"], default_value: false

    c.desc "Ingest files into SOLR_URL using tul_cob traject config"
    c.action do |global_options, options, args|
      opts = {}
      marc_xml = open(ARGV[0]).read
      opts.merge!(commit: options[:commit], marc_xml: marc_xml)

      CobIndex::CLI.ingest(opts)
    end
  end

  desc "Send commit command to the Solr instance."
  command :commit do |c|
    c.desc "Commit docs after ingest process closes."
    c.desc "Send commit command to the Solr instance."
    c.action do |global_options, options, args|
      CobIndex::CLI.commit
    end
  end

  desc "Delete documents from solr endpoint"
  arg_name "filepath/URL"
  command :delete do |c|
    c.desc "Commit docs after delete process closes."
    c.switch ["commit"], default_value: false

    c.desc "Suppress the documents instead of deleting them."
    c.switch ["suppress"], default_value: false

    c.desc "Delete documents from solr"
    c.action do |global_options, options, args|
      xml = open(ARGV[0]).read

      opts = {}
      opts.merge!(commit: options[:commit], xml: xml, suppress: options[:suppress])

      CobIndex::CLI.delete(opts)
    end
  end

  desc "Harvest documents from various endpoints."
  arg_name "filepath/OAI-endpoint"
  command :harvest do |c|
    c.desc "Type of harvest to perform. Defaults to Alma Electrnic harvest."
    c.flag ["type"], default_value: "alma-electronic"

    c.desc "Delete documents from solr"
    c.action do |global_options, options, args|
      opts = {}
      opts.merge!(type: options[:type])

      CobIndex::CLI.harvest(options)
    end
  end

  pre do |global, command, options, args|
    # Pre logic here
    # Return true to proceed; false to abort and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    true
  end

  post do |global, command, options, args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
  end

  on_error do |exception|
    # Error logic here
    # return false to skip default error handling
    true
  end
end

exit App.run(ARGV)
